import { Component, OnInit } from '@angular/core';
import {DataService} from "../../../services/data/data.service";
import {HttpResponse} from "@angular/common/http";
import {ConnApiService} from "../../../services/conn-api/conn-api.service";
import {Numbers} from "../../../utilities/numbers";

@Component({
  selector: 'app-exploitation',
  templateUrl: './exploitation.page.html',
  styleUrls: ['./exploitation.page.scss'],
  providers: [Numbers]
})
export class ExploitationPage implements OnInit {

  // urls
  urlStatisticsOverview = "statistics/overview"

  // variables
  bExtendScan = false
  bExtendReuse = false
  bExtendRefurb = false
  bExtendRecycling = false
  bExtendSecurity = false

  oStatisticsOverview = null;

  constructor(public uNumbers: Numbers, private dataService: DataService, private connApi: ConnApiService) { }

  ngOnInit() {
    let json = {}
    this.connApi.post(this.urlStatisticsOverview, json).subscribe((response: HttpResponse<any>) => {
      this.oStatisticsOverview = response.body;
      console.log(this.oStatisticsOverview)
    })
  }

  onScroll(event) {
    this.dataService.scroll(event.detail.scrollTop)
  };

  onLink(handysSpenden: string) {

  }

  onExtend(nProfile) {
    this.bExtendScan = false;
    this.bExtendReuse = false;
    this.bExtendRefurb = false;
    this.bExtendRecycling = false;
    this.bExtendSecurity = false;

    switch (nProfile) {
      case 0:
        this.bExtendScan = !this.bExtendScan
        break;
      case 1:
        this.bExtendReuse = !this.bExtendReuse
        break;
      case 2:
        this.bExtendRefurb = !this.bExtendRefurb
        break;
      case 3:
        this.bExtendRecycling = !this.bExtendRecycling
        break;
      case 4:
        this.bExtendSecurity = !this.bExtendSecurity
        break;
    }
  }

  get_nDevices() {
    if (this.oStatisticsOverview != null) {
      return this.oStatisticsOverview.nDevices;
    } else {
      return "-"
    }
  }

  get_nReuse() {
    if (this.oStatisticsOverview != null) {
      return this.oStatisticsOverview.nReuse;
    } else {
      return "-"
    }
  }

  get_nRecycling() {
    if (this.oStatisticsOverview != null) {
      return this.oStatisticsOverview.nRecycling;
    } else {
      return "-"
    }
  }

  transGramm(nGramm) {
    let weight = {
      value: nGramm,
      unit: 'g'
    }
    if (weight.value / 1000 >= 1) {
      weight.value = nGramm / 1000
      weight.unit = 'kg'
      if (weight.value / 1000 >= 1) {
        weight.value = weight.value / 1000
        weight.unit = 'Tonnen'
      }
    }

    weight.value = parseFloat(weight.value).toFixed(0).replace('.', ',');
    return weight;

  }
}
